use diesel::{Queryable, Insertable, Identifiable, AsChangeset, Selectable};
use serde::{Serialize, Deserialize};
use uuid::Uuid;
use crate::schema::services;

/// üîπ Estrutura de Servi√ßo (Tabela `services`)
#[derive(Debug, Queryable, Serialize, Deserialize, Identifiable, Selectable)]
#[diesel(table_name = services)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Service {
    pub id: Uuid,                  // ID √∫nico do servi√ßo
    pub nome: String,              // Nome do servi√ßo
    pub descricao: Option<String>, // Descri√ß√£o do servi√ßo (opcional)
    pub preco: f64,                // Pre√ßo do servi√ßo
    pub duracao_min: i32,          // Dura√ß√£o do servi√ßo em minutos
    pub ativo: bool,               // Indica se o servi√ßo est√° ativo ou n√£o
}

/// üîπ Estrutura para criar um novo servi√ßo (para inser√ß√£o no banco)
#[derive(Debug, Insertable, Deserialize)]
#[diesel(table_name = services)]
pub struct NewService {
    pub nome: String,              // Nome do servi√ßo
    pub descricao: Option<String>, // Descri√ß√£o do servi√ßo (opcional)
    pub preco: f64,                // Pre√ßo do servi√ßo
    pub duracao_min: i32,          // Dura√ß√£o do servi√ßo em minutos
    pub ativo: bool,               // Indica se o servi√ßo est√° ativo ou n√£o
}

/// üîπ Estrutura para atualizar um servi√ßo existente (para atualiza√ß√£o no banco)
#[derive(Debug, AsChangeset, Deserialize)]
#[diesel(table_name = services)]
pub struct UpdateService {
    pub nome: Option<String>,      // Nome do servi√ßo (opcional para atualiza√ß√£o)
    pub descricao: Option<String>, // Descri√ß√£o do servi√ßo (opcional para atualiza√ß√£o)
    pub preco: Option<f64>,        // Pre√ßo do servi√ßo (opcional para atualiza√ß√£o)
    pub duracao_min: Option<i32>,  // Dura√ß√£o do servi√ßo em minutos (opcional para atualiza√ß√£o)
    pub ativo: Option<bool>,       // Status de ativa√ß√£o do servi√ßo (opcional para atualiza√ß√£o)
}
