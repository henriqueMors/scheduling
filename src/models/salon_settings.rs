use diesel::{Queryable, Insertable, Identifiable, AsChangeset};
use serde::{Serialize, Deserialize};
use uuid::Uuid;
use chrono::NaiveDateTime;
use crate::schema::salon_settings;

/// üîπ Estrutura para representar as configura√ß√µes de um sal√£o no banco de dados
#[derive(Debug, Queryable, Serialize, Deserialize, Identifiable)]
#[diesel(table_name = salon_settings)]
pub struct SalonSetting {
    pub id: Uuid,                          // ID √∫nico da configura√ß√£o do sal√£o
    pub opening_hour: String,               // Hora de abertura, Ex: "08:00"
    pub closing_hour: String,               // Hora de fechamento, Ex: "18:00"
    pub working_days: Vec<String>,          // Dias da semana que o sal√£o funciona, Ex: ["monday", "tuesday", "wednesday"]
    pub created_at: NaiveDateTime,          // Data de cria√ß√£o da configura√ß√£o (usando NaiveDateTime)
}

/// üîπ Estrutura para criar uma nova configura√ß√£o de sal√£o (para inser√ß√£o no banco)
#[derive(Debug, Insertable, Deserialize)]
#[diesel(table_name = salon_settings)]
pub struct NewSalonSetting {
    pub opening_hour: String,               // Hora de abertura, Ex: "08:00"
    pub closing_hour: String,               // Hora de fechamento, Ex: "18:00"
    pub working_days: Vec<String>,          // Dias da semana que o sal√£o funciona, Ex: ["monday", "tuesday", "wednesday"]
}

/// üîπ Estrutura para atualizar uma configura√ß√£o de sal√£o existente (para atualiza√ß√£o no banco)
#[derive(Debug, AsChangeset, Deserialize)]
#[diesel(table_name = salon_settings)]
pub struct UpdateSalonSetting {
    pub opening_hour: Option<String>,       // Hora de abertura (opcional para atualiza√ß√£o)
    pub closing_hour: Option<String>,       // Hora de fechamento (opcional para atualiza√ß√£o)
    pub working_days: Option<Vec<String>>,  // Dias da semana (opcional para atualiza√ß√£o)
}
