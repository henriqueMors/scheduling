use axum::http::{Request, Response};
use std::time::Duration;
use tower::{Service, ServiceBuilder, Layer};
use tower_http::{timeout::TimeoutLayer, limit::ConcurrencyLimitLayer};

/// ğŸ”¹ Middleware de Rate Limit para 5 requisiÃ§Ãµes simultÃ¢neas por IP
pub fn rate_limit_middleware<S>() -> impl Layer<S> + Clone + Send
where
    S: Service<Request, Response = Response> + Clone + Send + 'static,
    S::Future: Send + 'static,
{
    ServiceBuilder::new()
        .layer(ConcurrencyLimitLayer::new(5)) // ğŸ”¥ Limite de 5 conexÃµes simultÃ¢neas
        .layer(TimeoutLayer::new(Duration::from_secs(1))) // ğŸ”¥ Timeout de 1s
}

/// ğŸ”¹ Middleware de Rate Limit mais agressivo (2 requisiÃ§Ãµes simultÃ¢neas por IP)
pub fn strict_rate_limit_middleware<S>() -> impl Layer<S> + Clone + Send
where
    S: Service<Request, Response = Response> + Clone + Send + 'static,
    S::Future: Send + 'static,
{
    ServiceBuilder::new()
        .layer(ConcurrencyLimitLayer::new(2)) // ğŸ”¥ Apenas 2 conexÃµes simultÃ¢neas
        .layer(TimeoutLayer::new(Duration::from_secs(1))) // ğŸ”¥ Timeout de 1s
}
