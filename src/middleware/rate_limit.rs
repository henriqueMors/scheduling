use axum::http::Request;
use std::time::Duration;
use tower_http::timeout::TimeoutLayer;
use tower_http::add_extension::AddExtensionLayer;
use tower::{ServiceBuilder, Service};
use std::sync::Arc;
use tokio::sync::Semaphore;

/// ðŸ”¹ Configura Rate Limiting para 5 requisiÃ§Ãµes simultÃ¢neas por IP
pub fn rate_limit_middleware<S>() -> impl tower::Layer<S> + Clone + Send
where
    S: Service<Request<axum::body::Body>> + Clone + Send + 'static,
    S::Future: Send + 'static,
{
    let semaphore = Arc::new(Semaphore::new(5)); // âœ… 5 requisiÃ§Ãµes simultÃ¢neas

    ServiceBuilder::new()
        .layer(AddExtensionLayer::new(semaphore.clone()))
        .layer(TimeoutLayer::new(Duration::from_secs(1))) // âœ… Timeout de 1 segundo
}

/// ðŸ”¹ Configura Rate Limiting mais agressivo para endpoints crÃ­ticos
pub fn strict_rate_limit_middleware<S>() -> impl tower::Layer<S> + Clone + Send
where
    S: Service<Request<axum::body::Body>> + Clone + Send + 'static,
    S::Future: Send + 'static,
{
    let semaphore = Arc::new(Semaphore::new(2)); // âœ… 2 requisiÃ§Ãµes simultÃ¢neas

    ServiceBuilder::new()
        .layer(AddExtensionLayer::new(semaphore.clone()))
        .layer(TimeoutLayer::new(Duration::from_secs(1))) // âœ… Timeout de 1 segundo
}
